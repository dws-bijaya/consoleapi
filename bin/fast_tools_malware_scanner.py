from os import replace
from urllib.parse import urlparse
import requests
import http.server
import html
from urllib.parse import urljoin
import re


class ERROR_CODES:
	OK = (0x0, '+OK')
	UNKNONWN = (0x1, 'Unknown')
	MALFORM_URL = (0x2, 'Malform URL')
	INVALID_USER_AGENT = (0x3, 'Invalid User Agent')
	INVALID_REFERER = (0x3, 'Invalid Referer')
	CATCH_ALL = (0x3, '')

	@classmethod
	def new(self, Err_No: int, Err_Msg: str):
		return (Err_No if Err_No is not None else 1, Err_Msg)


class Malware_Scanner:
	@classmethod
	def validate_url(self, scan_url):
		try:
			#scan_url = 'https://www.google.com/hello'
			o = urlparse(scan_url)
			return o.netloc if o.scheme.lower() in ['http', 'https'] and o.netloc else None
		except:
			pass
		return None

	@classmethod
	def default_response(self):
		response = {}
		response['errno'], response['errmsg'] = ERROR_CODES.UNKNONWN
		response['ouput'] = []
		return response

	@classmethod
	def _status_code(self, http_code):
		status_code = http_code
		status_msg = 'No Reason'
		if http_code in http.server.BaseHTTPRequestHandler.responses:
			status_msg = http.server.BaseHTTPRequestHandler.responses[http_code][0]
		return (status_code, status_msg)

	@classmethod
	def _blog_code_html(self, strhtml):
		import re
		strhtml = re.sub(r'<(script|html|iframe|meta|title|head|body)( |>)?', '<$lt;span class=$quot;sourcecode-hilght-tags$quot;$gt;\\1$lt;/span$gt;\\2', strhtml, flags=re.IGNORECASE)
		strhtml = re.sub(r'</(script|html|iframe|meta|title|head|body)>', '</$lt;span class=$quot;sourcecode-hilght-tags$quot;$gt;\\1$lt;/span$gt;>', strhtml, flags=re.IGNORECASE)
		strhtml = html.escape(strhtml)
		strhtml = strhtml.replace('$lt;', '<').replace('$gt;', '>').replace('$quot;', '"')
		#print(strhtml)
		#exit()
		return strhtml

	@classmethod
	def Scann(self, params):

		referers = {
		    'Google': 'https://www.google.com',
		    'Google_Images': 'https://images.google.com',
		    'Bing': 'https://www.bing.com',
		    'Yahoo': 'https://in.yahoo.com',
		    'Facebook': 'https://www.facebook.com',
		    'Yandex': 'https://yandex.com',
		    'Baidu': 'https://www.baidu.com',
		    'Site_Being_Checked': True,
		    'None': None
		}
		agents = {
		    'Browser_User_Agent': True,
		    'Googlebot_Desktop': 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
		    'Googlebot_Smartphone': 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/W.X.Y.Z Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
		    'Googlebot_Image': 'Mozilla/5.0 (compatible; Googlebot-Image/1.0; +http://www.google.com/bot.html)',
		    'Googlebot_Video': 'Googlebot-Video/1.0',
		    'Googlebot_News': 'Googlebot-News',
		    'Google_Mediapartners': 'Mediapartners-Google',
		    'Firefox_Desktop': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0',
		    'Firefox_Mobile': 'Mozilla/5.0 (Android 11; Mobile; rv:68.0) Gecko/68.0 Firefox/90.0',
		    'Chrome_Desktop': 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36',
		    'Chrome_Mobile': 'Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36',
		    'Opera_Desktop': 'Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36 OPR/77.0.4054.254',
		    'Opera_Mobile': 'Mozilla/5.0 (Linux; Android 10; VOG-L29) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36 OPR/63.3.3216.58675',
		    'Safari_Desktop': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 11_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15',
		    'Safari_Mobile': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1',
		    'Edge_Desktop': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36 Edg/91.0.864.67',
		    'Edge_Mobile': 'Mozilla/5.0 (Linux; Android 10; HD1913) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36 EdgA/46.5.4.5158',
		    'Yandex_Desktop': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 YaBrowser/21.6.0 Yowser/2.5 Safari/537.36',
		    'Yandex_Mobile': 'Mozilla/5.0 (Linux; arm_64; Android 11; SM-G965F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 YaBrowser/21.3.4.59 Mobile Safari/537.36',
		    'IE_10': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2)',
		    'IE_11': 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko',
		    'Ask_Jeeves': 'Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://sp.ask.com/docs/about/tech_crawling.html)'
		}

		user_agent = None if 'useragent' not in params else params['useragent']
		http_referer = None if 'referer' not in params else params['referer']
		scan_url = None if 'url' not in params else params['url']

		response = self.default_response()
		domain = self.validate_url(scan_url)
		if domain is None:
			response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_URL
			return response

		if user_agent is None or user_agent not in agents.keys():
			response['errno'], response['errmsg'] = ERROR_CODES.INVALID_USER_AGENT
			return response

		http_referer = 'None' if http_referer is None else http_referer
		if http_referer not in referers.keys():
			response['errno'], response['errmsg'] = ERROR_CODES.INVALID_USER_AGENT
			return response

		http_referer = scan_url if http_referer == 'Site_Being_Checked' else referers[http_referer]
		#exit([http_referer])
		user_agent = params['_HTTP_USER_AGENT'] if user_agent == 'Browser_User_Agent' else agents[user_agent]
		#exit([http_referer, user_agent])

		headers = {
		    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
		    "Accept-Encoding": "gzip, deflate",
		    "Accept-Language": "en-GB,en-US;q=0.9,en;q=0.8",
		    "Upgrade-Insecure-Requests": "1",
		    "User-Agent": user_agent,
		}
		if http_referer is not None:
			headers["Referer"] = http_referer

		#exit([headers])
		session = requests.Session()
		session.verify = False
		#scan_url = '//www.hhhee.com'
		httpresp = None
		try:
			httpresp = session.get(url=scan_url, headers=headers, allow_redirects=False, timeout=10)
		except Exception as e:
			response['errno'], response['errmsg'] = ERROR_CODES.new(ERROR_CODES.CATCH_ALL[0], repr(e))
			return response

		headers['Host'] = domain.split(":")[0]
		status_code = httpresp.status_code
		redirect_malware = False
		if status_code in [301, 302, 303, 304, 307]:
			redirect_url = None
			for key, value in httpresp.headers.items():
				if key == 'Location':
					redirect_url = value
					break
			redirect_url = urljoin(scan_url, redirect_url) if redirect_url else redirect_url
			redirect_domain = self.validate_url(redirect_url) if redirect_url else None
			#exit([redirect_domain, domain])
			redirect_malware = False if redirect_domain and domain and (redirect_domain.find(domain) != -1 or domain.find(redirect_domain) != -1) else True
			#redirect_malware = True
		response['errno'], response['errmsg'] = self._status_code(status_code)
		response['source_code'] = self._blog_code_html(httpresp.text).splitlines()
		response['issues'] = {
		    'header_redirection': False,
		    'meta_redirection': False,
		}

		response['response_headers'] = [
		    html.escape("%s: %s" % (key, value)) if key != 'Location' else re.sub(r'(Location:)( )+(.*)', '<span class="sourcecode-hilght-tags">\\1</span>\\2' +
		                                                                          ('<span class="sourcecode-hilght-malware">\\3</span>' if redirect_malware else '\\3'), html.escape("%s: %s" % (key, value))) for key, value in httpresp.headers.items()
		]
		#exit([response])
		#print(response)
		#exit()
		return response

		#exit([(response, httpresp.headers)])

		#response['errno'], response['errmsg'] = ERROR_CODES.SMTPSuccess
		#return response
		server_type = params['server_type'].lower() if 'server_type' in params else None
		#exit([server_type])
		if server_type not in self.LIBS_ALLOWED:
			return response

		host = params['host'] if 'host' in params else ''
		#host = '193.234.4.3'
		port = params['port'] if 'port' in params else ''
		secure = params['secure'].lower() if 'secure' in params else ''
		auth = params['auth'] if 'auth' in params else {}
		libray = params['libray'] if 'libray' in params else None

		if auth and ('username' not in auth or 'password' not in auth or auth['username'] is None or auth['password'] is None):
			response['errno'], response['errmsg'] = ERROR_CODES.INVALID_UESERAUTH
			return response

		#username = params['username'] if 'username' in params else ''
		#password = params['password'] if 'password' in params else ''

		if server_type == 'server_smtp':
			if not (re.search('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$', host)
			        or re.search('^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$', host)) or host in ['localhost', '127.0.0.1', '0.0.0.0']:
				response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_HOST
				return response

			try:
				port = int(port)
			except Exception as e:
				port = -1

			if port <= 0 or port >= 9999999:
				response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_PORT
				return response

			if secure not in ['unsecured', 'ssl', 'tls']:
				response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_HOST
				return response

			starttls = params['starttls'] if 'starttls' in params else False
			verify = params['verify'] if 'verify' in params else False

			#exit('+OK')
		#if( !( g.test(host) || /^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$/g.test(host) || /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/g.test(host)))

		from_addrs = self.build_emailaddresses([params['from_address'] if 'from_address' in params else ''])
		if from_addrs is None:
			response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_EMAILADDRESS
			return response

		#exit([from_adrs])
		to_addrs = self.build_emailaddresses(params['to_address'] if 'to_address' in params else '')
		if to_addrs is None:
			response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_TO_EMAILADDRESS
			return response

		#
		bcc_address = params['bcc_address'] if 'bcc_address' in params else []
		cc_addresses = params['cc_address'] if 'cc_address' in params else []
		bcc_addrs, cc_addrs = ([], [])
		if bcc_address:
			bcc_addrs = self.build_emailaddresses(bcc_address)
			if bcc_addrs is None:
				response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_BCC_EMAILADDRESS
				return response

		if cc_addresses:
			cc_addrs = self.build_emailaddresses(cc_addresses)
			if cc_addrs is None:
				response['errno'], response['errmsg'] = ERROR_CODES.MALFORM_CC_EMAILADDRESS
				return response

		from_addrs = from_addrs[0]
		#exit([from_addrs, to_addrs, bcc_addrs, cc_addrs])

		format = params['format'].lower() if 'format' in params else None
		if format not in ['html_text', 'html_only', 'text_only']:
			response['errno'], response['errmsg'] = ERROR_CODES.INVALID_MAIL_FORMAT
			return response

		subject = params['subject'] if 'subject' in params else 'Test Subject'
		body_html = params['body'] if 'body' in params else ''
		body_text = self.get_text(body_html) if format == 'html_text' else body_html if format == 'text_only' else None
		if format == 'text_only':
			body_html = None

		#exit([body_html, body_text])
		if server_type == 'server_smtp':
			return Server_Smtp.send(response, libray, host, port, secure, starttls, verify, auth, from_addrs, to_addrs, bcc_addrs, cc_addrs, subject, body_html, body_text)
